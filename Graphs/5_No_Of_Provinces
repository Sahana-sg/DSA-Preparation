There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
A province is a group of directly or indirectly connected cities and no other cities outside of the group.
You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.
Return the total number of provinces.


class Solution {
public:
    void dfs(int node, vector<int> &vis, vector<int> adjList[]){
        vis[node] = 1;
        for(auto it: adjList[node]){
            if(!vis[it]){
                dfs(it, vis, adjList);
            }
        }
        return;
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int nodes = isConnected.size();
        vector<int> adjList[nodes];

        for(int i = 0; i<nodes; i++){
            for(int j = 0; j<nodes; j++){
                if(isConnected[i][j] && i!= j){
                    adjList[i].push_back(j);
                }
            }
        }

        vector<int> vis(nodes, 0);
        int count = 0;
        for(int i = 0; i<nodes; i++){
            if(!vis[i]){
                dfs(i, vis, adjList);
                count++;
            }
        }
        return count;
    }
};

Given a connected undirected graph represented by an adjacency list adj, which is a vector of vectors where each adj[i] represents the list of vertices connected to vertex i. Perform a Breadth First Traversal (BFS) starting from vertex 0, visiting vertices from left to right according to the adjacency list, and return a list containing the BFS traversal of the graph.

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    void bfs(int start, vector<int> &vis, vector<int> &res, vector<vector<int>> &adj)
    {
        queue<int> que;
        que.push(start);
        vis[start] = 1;
        
        while(!que.empty()){
            // cout<<" que : "<<que.size();
            int top = que.front();
            que.pop();
            res.push_back(top);
            for(int i = 0; i<adj[top].size(); i++){
                if(!vis[adj[top][i]]){
                    que.push(adj[top][i]);
                    vis[adj[top][i]] = 1;
                }
            }   
        }
        return;
    }
    
    vector<int> bfsOfGraph(vector<vector<int>> &adj) {
        // Code here
        int nodes = adj.size();
        vector<int> res;
        vector<int> vis(nodes+1, 0);
        bfs(0, vis, res, adj);
        return res;
    }
};

//{ Driver Code Starts.

int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        // Now using vector of vectors instead of array of vectors
        vector<vector<int>> adj(V);

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u); // For undirected graph, add both u->v and v->u
        }

        Solution obj;
        vector<int> ans = obj.bfsOfGraph(adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends

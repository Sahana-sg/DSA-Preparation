Given an undirected graph with V nodes and E edges, create and return an adjacency list of the graph. 0-based indexing is followed everywhere.

//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
class Solution {
  public:
    long long power(long long n, long long m){
        long long res = 1;
        
        while(m){
            if(m%2){
                res = (res*n);
            }
            m = m >> 1;
            n = (n*n);
        }
        
        return res;
    }
    
    long long count(int n) {
        // your code here
        long long m = (n* (n-1))/2;
        return power(2, m);
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        Solution ob;
        cout << ob.count(n) << "\n";
    
cout << "~" << "\n";
}

    return 0;
}

// } Driver Code Ends
